name: cmdc-build

on:
  push:
    branches: [ master ]
    tags:
      - v*

  pull_request:
    branches: [ master ]

  # This allows you to run this workflow manually from the GitHub "Actions" tab
  workflow_dispatch:

jobs:
  #
  # Windows
  #   
  #       __
  #  |\__/  \
  #  |       |
  #  |    __ |
  #   \__/  \|
  #
  #   
  maya-win:
    runs-on: windows-latest

    strategy:

      # Without this, all containers stop if any fail
      # That's bad, we want to know whether it's only one
      # or if it happens to multiples or all.
      fail-fast: false

      matrix:
       include:
         - maya: "2018.7"
           devkit: "https://autodesk-adn-transfer.s3.us-west-2.amazonaws.com/ADN%20Extranet/M%26E/Maya/devkit%202018/Autodesk_Maya_2018_7_Update_DEVKIT_Windows.zip"
         - maya: "2019.3"
           devkit: "https://autodesk-adn-transfer.s3.us-west-2.amazonaws.com/ADN%20Extranet/M%26E/Maya/devkit%202019/Autodesk_Maya_2019_3_Update_DEVKIT_Windows.zip"
         - maya: "2020.4"
           devkit: "https://autodesk-adn-transfer.s3-us-west-2.amazonaws.com/ADN+Extranet/M%26E/Maya/devkit+2020/Autodesk_Maya_2020_4_Update_DEVKIT_Windows.zip"
         - maya: "2022"
           devkit: "https://autodesk-adn-transfer.s3.us-west-2.amazonaws.com/ADN%20Extranet/M%26E/Maya/devkit%202022/Autodesk_Maya_2022_DEVKIT_Windows.zip"

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout code
        uses: actions/checkout@v1

      - name: Devkit source
        run: |
          Write-Host "Downloading ${{ matrix.devkit }}.."
          Invoke-WebRequest -Uri ${{ matrix.devkit }} -OutFile "$pwd/devkit.zip"
          Write-Host "Extracting devkit.zip.."
          Expand-Archive -LiteralPath devkit.zip -DestinationPath $pwd

      # Here we'll also translate Visual Studio's environment
      # setup script - vcvars64.bat - to PowerShell
      - name: Build
        run: |
          pushd "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build"
          cmd /c "vcvars64.bat&set" | foreach {
            if ($_ -match "=") {
              $v = $_.split("="); set-item -force -path "ENV:\$($v[0])"  -value "$($v[1])"
            }
          }
          popd
          $env:DEVKIT_LOCATION = "$pwd\devkitBase"
          ./build_win32.ps1 ${{ matrix.maya }}

      - name: Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: windows-${{ matrix.maya }}
          path: build/cmdc.pyd


  #
  # Linux
  #
  #     _
  #    |o\
  #    /  \
  #   /    \
  #  |_|___|
  #
  #
  maya-linux:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false

      matrix:
       include:
         - maya: "2018.7" # For distribution
           image: "2018.7"  # For docker
           pip: "2.7/get-pip.py"
           devkit: "https://autodesk-adn-transfer.s3.us-west-2.amazonaws.com/ADN%20Extranet/M%26E/Maya/devkit%202018/Autodesk_Maya_2018_7_Update_DEVKIT_Linux.tgz"
           generate_stubgs: false
         - maya: "2019.3"
           image: "2019"
           pip: "2.7/get-pip.py"
           devkit: "https://autodesk-adn-transfer.s3.us-west-2.amazonaws.com/ADN%20Extranet/M%26E/Maya/devkit%202019/Autodesk_Maya_2019_3_Update_DEVKIT_Linux.tgz"
           generate_stubgs: false
         - maya: "2020.4"
           image: "2020"
           pip: "2.7/get-pip.py"
           devkit: "https://autodesk-adn-transfer.s3.us-west-2.amazonaws.com/ADN%20Extranet/M%26E/Maya/devkit%202020/Autodesk_Maya_2020_4_Update_DEVKIT_Linux.tgz"
           generate_stubgs: false
         - maya: "2022"
           image: "2022"
           pip: "get-pip.py"
           devkit: "https://autodesk-adn-transfer.s3.us-west-2.amazonaws.com/ADN%20Extranet/M%26E/Maya/devkit%202022/Autodesk_Maya_2022_DEVKIT_Linux.tgz"
           generate_stubgs: true

    container: mottosso/maya:${{ matrix.image }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v1

      - name: Setup Build Environment
        run: |
          yum install centos-release-scl -y
          yum install devtoolset-7 bc -y

      - name: Devkit source
        run: |
          echo "Downloading ${{ matrix.devkit }}.."
          wget ${{ matrix.devkit }} -O "$(pwd)/devkit.tgz"
          echo "Extracting devkit.tgz.."
          tar -xvf $(pwd)/devkit.tgz $pwd

      # For the weird scl_source call below, see:
      # https://github.com/actions/virtual-environments/issues/1279
      - name: Build
        run: |
          export DEVKIT_LOCATION=$(pwd)/devkitBase
          . scl_source enable devtoolset-7 || true
          g++ --version
          chmod +x ./build_linux.sh
          ./build_linux.sh ${{ matrix.maya }}

      # We'll lock each version to one that works with both Python 2.7 and 3.7
      - name: Setup Test Environment
        run: |
          wget https://bootstrap.pypa.io/pip/${{ matrix.pip }}
          mayapy get-pip.py --user
          mayapy -m pip install --user \
            nose==1.3.7 \
            nose-exclude==0.5.0 \
            coverage==5.5 \
            flaky==3.7.0 \
            six==1.16.0 \
            sphinx==1.8.5 \
            sphinxcontrib-napoleon==0.7

        # Since 2019, this sucker throws an unnecessary
        # warning if not declared.
      - name: Environment
        run: |
          mkdir -p /var/tmp/runtime-root
          export XDG_RUNTIME_DIR=/var/tmp/runtime-root
          export MAYA_DISABLE_ADP=1

      - name: Tests
        run: |
          pwd
          ls
          mayapy --version
          export PYTHONPATH=$(pwd)/build
          mayapy -m nose -xv --exe ./tests
      
      - name: Generate Stubs
        if: ${{ matrix.generate_stubs }}
        run: |
          mayapy -m pip install --user \
            pybind11-stubgen==0.8.7 \
          mayapy ./scripts/generate_stubs.py

      - name: Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: linux-${{ matrix.maya }}
          path: build/cmdc.so


  # maya-osx:
  #   runs-on: macos-latest
  #   needs: create_release

  #   strategy:

  #     # Without this, all containers stop if any fail
  #     # That's bad, we want to know whether it's only one
  #     # or if it happens to multiples or all.
  #     fail-fast: false

  #     matrix:
  #      include:
  #        - maya: "2018.7"
  #          devkit: "https://autodesk-adn-transfer.s3.us-west-2.amazonaws.com/ADN%20Extranet/M%26E/Maya/devkit%202018/Autodesk_Maya_2018_7_Update_DEVKIT_Mac.dmg"
  #        - maya: "2019.3"
  #          devkit: "https://autodesk-adn-transfer.s3.us-west-2.amazonaws.com/ADN%20Extranet/M%26E/Maya/devkit%202019/Autodesk_Maya_2019_3_Update_DEVKIT_Mac.dmg"
  #        - maya: "2020.4"
  #          devkit: "https://autodesk-adn-transfer.s3-us-west-2.amazonaws.com/ADN+Extranet/M%26E/Maya/devkit+2020/Autodesk_Maya_2020_4_Update_DEVKIT_Mac.dmg"
  #        - maya: "2022"
  #          devkit: "https://autodesk-adn-transfer.s3.us-west-2.amazonaws.com/ADN%20Extranet/M%26E/Maya/devkit%202022/Autodesk_Maya_2022_DEVKIT_Mac.dmg"

  #   # Steps represent a sequence of tasks that will be executed as part of the job
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v1


  #
  # Shipping
  #
  #   _________
  #  |\ _ _ _ _\
  #  | \________\
  #  | |        |
  #  | |        |
  #   \|________|
  #
  #
  upload_release:
    name: Upload release
    needs: [maya-win, maya-linux]
    runs-on: ubuntu-latest

    # Only run on e.g. v0.1.0
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v1

      - name: Download artifacts
        uses: actions/download-artifact@v2

        # Omitting name: means "download all artifacts"
        # Destination directory structure:
        # ~/modules
        #   /cmdc-0.1.0
        #     windows-2018.7/cmdc.pyd
        #     windows-2019.3/cmdc.pyd
        #     windows-2020.4/cmdc.pyd
        #     windows-2022/cmdc.pyd
        #     linux-2018.7/cmdc.so
        #     linux-2019.3/cmdc.so
        #     linux-2020.4/cmdc.so
        #     linux-2022/cmdc.so
        #   /cmdc.mod
        with:
          path: modules/cmdc-0.1.0

      - name: Create distribution
        run: |
          cp ./cmdc.mod modules/
          zip -r cmdc-0.1.0.zip modules/

      - name: Upload distribution
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: false
          files: |
            cmdc-*.zip
